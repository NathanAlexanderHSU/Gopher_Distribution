library (rgdal)
library(dismo)

require(raster)
require(fields)
require(mvtnorm)
require(matrixStats)



illinois<-readOGR(dsn="C:/Users/Nathan/Desktop/Gopher/Political Boundaries",layer="IL_BNDY_County_Py")
plot(illinois)

Gopher_site<-readOGR(dsn="C:/Users/Nathan/Desktop/Gopher/Survey Design/Sites",layer="Site_withInfo")
points(Gopher_site)

##Predictor variables
##elevation

elev <- getData('alt', download=TRUE, country='USA', mask=TRUE)
elev.48 <- elev[[1]]

##Bioclim
clim.W<-getData('worldclim',var='bio',res=2.5)
clim<-crop(clim.W,illinois)

##have to fix crs (switch to WGS 84) for illinois to mask

crs(illinois)<-crs(clim)


cr.clim<-mask(clim,illinois)
cr.elev<-crop(elev.48,illinois)
cr.elev<-mask(cr.elev,illinois)
##soil

soil<-readOGR(dsn="C:/Users/Nathan/Desktop/Gopher/Environmental Shapefiles/wss_gsmsoil_IL_[2006-07-06]/spatial",layer="gsmsoilmu_a_il")
cr.clim<-resample(cr.clim,cr.elev)
r<-raster(ncol=ncol(cr.clim[[1]]),nrow=nrow(cr.clim[[1]]))
extent(r)<-extent(cr.clim)
soil.ras = rasterize( soil, r, 'MUKEY')
compareRaster(cr.clim,soil.ras,cr.elev)


##convert elevation to slope
slope<-terrain(cr.elev,opt='slope',unit='degrees',neighbors=8)
plot(slope)
##select predictors
predictors <- stack(cr.clim,cr.elev,slope,soil.ras)


####combine Site Variables with PA dataset

variables<-extract(predictors,coordinates(Gopher_site)[,1:2])


Gopher_site_variables<-cbind(Gopher_site,variables)


###Generate detection matrix

##sites with presences: CTAP 69, CTAP 21, Rand 40,Rand 114, Rand 89
sites<-data.frame(rbind("CTAP 69", "CTAP 21", "Random 40","Random 114","Random 89"))

Pres<-matrix(c(1,1,1,1,1,1,1,1,0,1,0,0,1,1,0,0,0,1,0,0),ncol=4,byrow=TRUE)
Pres_site<-cbind(sites,Pres)
colnames(Pres_site)<-c("Type_ID","S1","S2","S3","S4")
PA_variable<-merge(Pres_site,Gopher_site_variables,by="Type_ID",all=TRUE)

PA_variable[is.na(PA_variable)]<-0


####Preparing PA data set
y.so<-PA_variable[,2:5]
J.so=ncol(y.so)
so.occupancy<-cbind(PA_variable$slope,PA_variable$bio11)

##need to name the columns if having more than 1 predictor

colnames(so.occupancy)<-c("slope","bio11")
X.so=cbind(rep(1, nrow(as.matrix(so.occupancy))), so.occupancy)

so.detection<-cbind(PA_variable$bio1,PA_variable$bio2)
colnames(so.detection)<-c("bio1","bio2")

W.so = array(dim=c(nrow(as.matrix(so.detection)), J.so, 2))
W.so[,,1] = 1
W.so[,,2] = so.detection# if it changes
so.fit=so.model(X.so,W.so,y.so)
so.fit

###if SE not reporting, due to recipCondNum.so>minrecipCondNum
##SE is only calculated if the above is true.

#########################
###PB #####

sp.occur <- gbif(genus='Geomys', species='bursarius', geo=TRUE,removeZeros=TRUE,ext=illinois)

sp.occur_2010<-sp.occur[which(sp.occur$year>=2010),]
class(sp.occur)
points(cbind(sp.occur_2010$lon,sp.occur_2010$lat),pch=17,col="red")


pb_variables<-extract(predictors,cbind(sp.occur_2010$lon,sp.occur_2010$lat))
sp.occur_2010_var<-cbind(sp.occur_2010,pb_variables)
head(sp.occur_2010_var)
names(predictors)
s.occupancy<-stack(predictors[[11]],predictors[[21]])
X.back = cbind(rep(1, ncell(s.occupancy)), values(s.occupancy))
colnames(X.back)=c("",names(s.occupancy))
head(X.back)
s.detection<-stack(predictors[[1]],predictors[[2]])

W.back = cbind(rep(1, ncell(s.detection)), values(s.detection))
colnames(W.back)=c("",names(s.detection))

# remove all NA values
tmp=X.back[complete.cases(X.back)&complete.cases(W.back),]
W.back=W.back[complete.cases(X.back)&complete.cases(W.back),]
X.back=tmp


area.back = rep((xres(s.occupancy)/1000)*(yres(s.occupancy)/1000), nrow(X.back))# each cell
s.area=area.back*nrow(X.back) #study area


pb.occupancy<-cbind(sp.occur_2010_var$bio11,sp.occur_2010_var$slope)
colnames(pb.occupancy)<-c("bio11","slope")
X.po=cbind(rep(1, nrow(as.matrix(pb.occupancy))), pb.occupancy)

pb.detection<-cbind(sp.occur_2010_var$bio1,sp.occur_2010_var$bio2)
colnames(pb.detection)<-c("bio1","bio2")
W.po=cbind(rep(1, nrow(as.matrix(pb.detection))), pb.detection)

pb.fit=pb.ipp(X.po,W.po,X.back,W.back)

pb.fit

#########################################
####integrated model#####################
#########################################

pbso<-pbso.integrated(X.po, W.po,X.back, W.back,X.so,W.so,y.so)
pbso
